go.property("blink", 0)
go.property("minimove", 0)
go.property("micromove", 0)

local look
local blink
local minimove
local micromove

look = function(self)
	msg.post("eye_left#sprite", "play_animation", { id = hash("left_" .. self.state ) })
	msg.post("eye_right#sprite", "play_animation", { id = hash("right_" .. self.state) })
	msg.post("eyeball_left#sprite", "play_animation", { id = hash("eyeball_" .. self.state .. "_left" ) })
	msg.post("eyeball_right#sprite", "play_animation", { id = hash("eyeball_" .. self.state .. "_right" ) })
	msg.post("eyeball_left#sprite", "enable")
	msg.post("eyeball_right#sprite", "enable")

	local wait = math.random(3, 10) / 2
	go.animate("#", "blink", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, wait, 0, blink)
end

blink = function(self)
	msg.post("eye_left#sprite", "play_animation", { id = hash("left_" .. self.state .. "_blink") })
	msg.post("eye_right#sprite", "play_animation", { id = hash("right_" .. self.state .. "_blink") })
	msg.post("eyeball_left#sprite", "disable")
	msg.post("eyeball_right#sprite", "disable")

	go.animate("#", "blink", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.2, 0, look)
end

minimove = function(self)
	local x = math.random() * 4 - 2
	local y = math.random() * 2 - 1
	local offset = vmath.vector3(x, y, 0)
	
	go.set_position(self.left_pos + offset, "eye_left")
	go.set_position(self.right_pos + offset, "eye_right")

	local wait = math.random(5, 20) / 20
	if self.state == "happy" then
		wait = math.random(8, 20) / 15
	end
	go.animate("#", "minimove", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, wait, 0, minimove)	
end

micromove = function(self)
	local s = math.random(98, 100) / 100

	go.set_scale(s, "eye_left")
	go.set_scale(s, "eye_right")

	local wait = math.random() / 10
	go.animate("#", "micromove", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, wait, 0, micromove)	
end


function init(self)
	self.state = "angry"
	self.left_pos = go.get_position("eye_left")
	self.right_pos = go.get_position("eye_right")
	look(self)
	minimove(self)		
	micromove(self)		
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	self.state = "angry"
end
